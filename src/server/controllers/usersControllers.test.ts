import type { NextFunction, Request, Response } from "express";
import bcrypt from "bcryptjs";
import { loginUserErrors, registerUserErrors } from "../../CustomError/errors";
import type { LoginUserBody, RegisterUserBody } from "./types";
import { loginUser, registerUser } from "./usersControllers";
import User from "../../database/models/User";
import mongoose from "mongoose";

beforeEach(() => {
  jest.clearAllMocks();
});
const req: Partial<Request> = {};

const res: Partial<Response> = {
  status: jest.fn().mockReturnThis(),
  json: jest.fn(),
};

const next = jest.fn();

describe("Given a registerUser controller", () => {
  describe("When it receives a request with username 'postman', email 'postman@correos.es', password: lettersandparcels, confirmPassword: packages", () => {
    test("Then next should be called with an error with message 'Passwords don't match'", async () => {
      const body: RegisterUserBody = {
        username: "postman",
        email: "postman@correos.es",
        password: "lettersandparcels",
        confirmPassword: "packages",
      };
      req.body = body;

      await registerUser(req as Request, null, next as NextFunction);

      expect(next).toHaveBeenCalledWith(registerUserErrors.noPasswordMatch);
    });
  });

  describe("When it receives a request with username 'admin', email 'admin@feisbuk.com', password 'admin123' and confirmPassword 'admin123'", () => {
    test("Then response's method status should be called with 201 and json with the new user's details", async () => {
      const body: RegisterUserBody = {
        username: "admin",
        email: "admin@feisbuk.com",
        password: "admin123",
        confirmPassword: "admin123",
      };
      req.body = body;
      const hashedPassword = "hashedpassword";
      const expectedStatus = 201;
      const id = new mongoose.Types.ObjectId();

      bcrypt.hash = jest.fn().mockResolvedValue(hashedPassword);

      User.create = jest.fn().mockResolvedValue({
        username: body.username,
        email: body.email,
        password: hashedPassword,
        _id: id,
      });

      await registerUser(req as Request, res as Response, null);

      expect(res.status).toHaveBeenCalledWith(expectedStatus);
      expect(res.json).toHaveBeenCalledWith({
        user: {
          username: body.username,
          email: body.email,
          id: id.toString(),
        },
      });
    });
  });

  describe("When it receives a request with username 'benjamin', email 'ben@feisbuk.com', password '12345678' and the username already exists on the server", () => {
    test("Then it should invoke next with an error with message 'User is already registered'", async () => {
      const body: RegisterUserBody = {
        username: "benjamin",
        email: "ben@feisbuk.com",
        password: "12345678",
        confirmPassword: "12345678",
      };
      req.body = body;
      bcrypt.hash = jest.fn().mockResolvedValue(body.password);
      User.create = jest.fn().mockRejectedValue(new Error("duplicate key"));

      await registerUser(req as Request, null, next as NextFunction);

      expect(next).toHaveBeenCalledWith(registerUserErrors.alreadyRegistered);
    });
  });

  describe("When it receives a request with username 'benjamin', email 'ben@feisbuk.com', password '12345678' and bcrypt rejects", () => {
    test("Then next should be invoked with the error generated by bcrypt", async () => {
      const body: RegisterUserBody = {
        username: "benjamin",
        email: "ben@feisbuk.com",
        password: "12345678",
        confirmPassword: "12345678",
      };
      req.body = body;
      const bcryptError = new Error();
      bcrypt.hash = jest.fn().mockRejectedValue(bcryptError);

      await registerUser(req as Request, null, next as NextFunction);

      expect(next).toHaveBeenCalledWith(bcryptError);
    });
  });
});

describe("Given a loginUser controller", () => {
  describe("When it receives a request with username 'timmy', password '12345678' and the user is not in the database", () => {
    test("Then next should be invoked with an error with status 401 and message 'Incorrect username or password'", async () => {
      const body: LoginUserBody = {
        username: "timmy",
        password: "12345678",
      };
      req.body = body;

      User.findOne = jest.fn().mockResolvedValue(null);

      await loginUser(req as Request, null, next as NextFunction);

      expect(next).toHaveBeenCalledWith(loginUserErrors.userNotFound);
    });
  });

  describe("When it receives a request with username 'admin', password '12345678' and the user is on the database but the password doesn't match", () => {
    test("Then next should be invoked with status 401 and message 'Incorrect username or password'", async () => {
      const body: LoginUserBody = {
        username: "admin",
        password: "12345678",
      };
      req.body = body;

      User.findOne = jest.fn().mockResolvedValue({
        username: body.username,
        password: "hashedpassword",
      });

      bcrypt.compare = jest.fn().mockResolvedValue(false);

      await loginUser(req as Request, res as Response, next as NextFunction);

      expect(next).toHaveBeenCalledWith(loginUserErrors.incorrectPassword);
    });
  });
});
